#include <Eigen/Dense>
#include <vector>
#include <random>
#include <iostream>
#include <algorithm>

// Function to generate multi-dimensional Fractal Brownian Motion
Eigen::MatrixXd generateMultiDimFBM(int dim, int n, double H) {
  std::random_device rd;
  std::mt19937 gen(rd());
  std::normal_distribution<> dis(0, 1);

  Eigen::MatrixXd W(dim, n);
  for (int i = 0; i < dim; ++i) {
    W.row(i) = Eigen::VectorXd::Zero(n);
    for (int j = 1; j < n; ++j) {
      double dW = std::pow(j, H - 0.5) * dis(gen);
      W(i, j) = W(i, j - 1) + dW;
    }
  }
  return W;
}

namespace FluidLatticeAI {

class Node {
public:
  Eigen::VectorXd flowVector; // Flow vector in arbitrary dimensions
  double adaptability;
  double randomnessFactor;
  Eigen::VectorXd state;
  Eigen::VectorXd memory;

  Node(int stateDimensions, int flowVectorDimensions) {
    initializeState(stateDimensions, flowVectorDimensions);
  }

  void process(Eigen::VectorXd inputSignal, std::vector<Node*> neighbors) {
    Eigen::VectorXd environmentalSignal = calculateEnvironmentalSignal(neighbors);
    adjustState(inputSignal);
    introduceRandomness();
    updateMemory();
    adaptToEnvironment(environmentalSignal); // New method inspired by mycelium
  }

  void activate() {
    applyReLU();
  }

  void learn(Eigen::VectorXd errorSignal) {
    adjustState(-adaptability * errorSignal);
  }

private:
  void initializeState(int stateDimensions, int flowVectorDimensions) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(-1, 1);

    flowVector = Eigen::VectorXd::Random(flowVectorDimensions).normalized();
    adaptability = dis(gen);
    randomnessFactor = dis(gen);
    state = Eigen::VectorXd::Random(stateDimensions);
    memory = Eigen::VectorXd::Zero(stateDimensions);
  }

  void adjustState(Eigen::VectorXd inputSignal) {
    state += adaptability * (flowVector.dot(inputSignal.normalized()) * inputSignal - state);
  }

  void introduceRandomness() {
    state += randomnessFactor * generateMultiDimFBM(state.size(), 1, 0.5);
  }

  void applyReLU() {
    state = state.cwiseMax(0);
  }

  void updateMemory() {
    memory = 0.9 * memory + 0.1 * state;
  }

  Eigen::VectorXd calculateEnvironmentalSignal(std::vector<Node*> neighbors) {
    Eigen::VectorXd environmentalSignal = Eigen::VectorXd::Zero(state.size());
    for (Node* neighbor : neighbors) {
      environmentalSignal += neighbor->state;
    }
    return environmentalSignal / neighbors.size();
  }

  void adaptToEnvironment(Eigen::VectorXd environmentalSignal) {
    state += adaptability * (flowVector.dot(environmentalSignal.normalized()) * environmentalSignal - state);
  }
};

class Lattice {
private:
  std::vector<std::vector<std::vector<Node>>> layers; // 3D layers

public:
  Lattice(int numLayersX, int numLayersY, int numLayersZ, int nodesPerLayer, int stateDimensions, int flowVectorDimensions) {
    initializeLayers(numLayersX, numLayersY, numLayersZ, nodesPerLayer, stateDimensions, flowVectorDimensions);
  }

  void addLayer(int numLayersX, int numLayersY, int numLayersZ, int nodesPerLayer, int stateDimensions, int flowVectorDimensions) {
    std::vector<std::vector<Node>> newLayerZ(numLayersZ, std::vector<Node>(nodesPerLayer, Node(stateDimensions, flowVectorDimensions)));
    std::vector<std::vector<std::vector<Node>>> newLayerY(numLayersY, newLayerZ);
    layers.push_back(newLayerY);
  }

  Eigen::VectorXd propagate(Eigen::VectorXd inputSignal) {
    for (int x = 0; x < layers.size(); ++x) {
      for (int y = 0; y < layers[x].size(); ++y) {
        for (int z = 0; z < layers[x][y].size(); ++z) {
          // Get the neighbors of the current node
          std::vector<Node*> neighbors;
          if (x > 0) neighbors.push_back(&layers[x-1][y][z]);
          if (x < layers.size() - 1) neighbors.push_back(&layers[x+1][y][z]);
          if (y > 0) neighbors.push_back(&layers[x][y-1][z]);
          if (y < layers[x].size() - 1) neighbors.push_back(&layers[x][y+1][z]);
          if (z > 0) neighbors.push_back(&layers[x][y][z-1]);
          if (z < layers[x][y].size() - 1) neighbors.push_back(&layers[x][y][z+1]);

          // Process the current node
          layers[x][y][z].process(inputSignal, neighbors);
        }
      }
    }

    // Return the state of the last node in the lattice
    return layers.back().back().back().state;
  }
};

} // namespace FluidLatticeAI
